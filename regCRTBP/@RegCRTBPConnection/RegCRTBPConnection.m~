classdef RegCRTBPConnection
    %REGCRTBPCONNECTION - One line description of the class (H1 line)
    %
    %   REGCRTBPCONNECTION() - Connection class for the GCS algorithm for the CRTBP with Levi-Cevita regularization.
    %
    %   REGCRTBPCONNECTION constructor syntax:
    %       RegCRTBPConnectionObj = $NAME()
    %
    %   REGCRTBPCONNECTION properties:
    %       Property 1 - description
    %       Property 2 - description
    %
    %   REGCRTBPCONNECTION methods:
    %       Method 1 - description
    %       Method 2 - description
    %
    %   Examples:
    %       Line 1 of example
    %       Line 2 of example
    %       Line 3 of example
    %
    %   Subfunctions: none
    %   Classes required: none
    %   Other m-files required: none
    %   MAT-files required: none
    
    %   Author: Shane Kepley
    %   email: s.kepley@vu.nl
    %   Date: 23-Feb-2023;
    %
    %   ToDo:
    %   item1 -
    %   item2 -
    
    
    %% ---------------------------------------- Properties ----------------------------------------
    properties
        StableChart
        UnstableChart
        LocalIntersection  % [stableSpace, stableTime, unstableSpace] coordinates for the interesection in the local coordinate system which is a subset of D^d
        GlobalIntersection  % [stableSpace, stableTime, unstableSpace, unstableTime] = global coordinates for the intersection: 
        ConnectionTime  % time of flight in physical time between source manifold and target manifold 
        LocalMaps  % [stableLocalMap, unstableLocalMap]
        TrueOrbit  % heuristics for deciding if the orbit is a connec
       
        
    end % end properties
    
    
    %% ---------------------------------------- Methods ----------------------------------------
    methods
        function obj = RegCRTBPConnection(connectionIntersectionData, stableLocalMap, unstableLocalMap)
            %REGCRTBPCONNECTION - class constructor
            warning('OFF', 'Chart:eval');  % turn off Chart.eval warning messages
            warning('OFF', 'Chart:local2global');  % turn off Chart.eval warning messages
            
            obj.StableChart = connectionIntersectionData{1};
            obj.UnstableChart = connectionIntersectionData{2};
            obj.LocalIntersection = connectionIntersectionData{3};  % x = (s1, t1, s2) and S(s1, t1) = U(s2, t0) in 3 coordinates
            obj.ConnectionTime = globalUnstableCoords(2) - globalStableCoords(2);  % time of flight in F0 time   
            obj.TrueOrbit = connectionInstersectionData{4};
            obj.LocalMaps = [stableLocalMap, unstableLocalMap];
        end % end class constructor
    end % end methods
    
